#!/usr/bin/env python
##############################################################################
# demo
# https://github.com/DigiLog-N/DigiLog-N
# Copyright 2020 Canvass Labs, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
from sys import stdout, argv
from digilog_n.Layer.NotificationLayer import NotificationLayer
from digilog_n.Layer.AnalysisLayer import AnalysisLayer
from digilog_n.Layer.ArchiveLayer import ArchiveLayer
from digilog_n.Layer.IdentityLayer import IdentityLayer
from digilog_n.Layer.IMSLayer import IMSLayer
from digilog_n.Layer.DecisionMakerLayer import DecisionMakerLayer
from digilog_n.DataSourceRegistry import DataSourceRegistry
import logging


mylogger = logging.getLogger("mylogger")
formatter = logging.Formatter('[%(levelname)s] %(message)s')
handler = logging.StreamHandler(stream=stdout)
handler.setFormatter(formatter)
handler.setLevel(logging.INFO)
mylogger.addHandler(handler)
mylogger.setLevel(logging.INFO)

mylogger.critical("System Logger: Showing CRITICAL Messages")
mylogger.error("System Logger: Showing ERROR Messages")
mylogger.warning("System Logger: Showing WARNING Messages")
mylogger.info("System Logger: Showing INFO Messages")
mylogger.debug("System Logger: Showing DEBUG Messages")


if __name__ == '__main__':
    dsr = DataSourceRegistry('127.0.0.1', 27017, 'digilog_n', 'data_sources')
    plasma_path = dsr.get_path_to_plasma()

    processes = []

    processes.append(NotificationLayer(plasma_path))
    processes.append(DecisionMakerLayer(plasma_path))
    processes.append(AnalysisLayer(plasma_path))
    processes.append(ArchiveLayer(plasma_path))
    processes.append(IMSLayer(plasma_path))
    processes.append(IdentityLayer(plasma_path))

    for p in processes:
        p.start()

    for p in processes:
        p.join()



